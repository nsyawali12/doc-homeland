# -*- coding: utf-8 -*-
"""gc_homeland_v5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KxO17WS6zUqYWFhFNcQuCuzXiXgeTJUz
"""

! pip install pytesseract
! apt-get install poppler-utils
! pip install pdf2image
! apt install tesseract-ocr
! apt install libtesseract-dev
! get install opencv
! pip install easyocr

import pdf2image
from pdf2image import convert_from_path
import easyocr
import numpy as np
import PIL
from PIL import ImageDraw
import spacy

from IPython.display import display, Image

import os
import tempfile
import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2

# 'en' = English
# 'id' = Indonesia
reader = easyocr.Reader(['id'])

from google.colab import files
uploaded = files.upload()

# path to read pdf
file_pdf = "data1.PDF"

# this section finish if the user only need the image pdf not the pages
# Store all the page
pdf_pages = convert_from_path(file_pdf, 500)

# the index counter store for each images
image_counter = 1 

# iterate all the pages stored in the pdf file
for page in pdf_pages:
  filename = "page_" + str(image_counter) + ".jpg"
  page.save(filename, 'JPEG')
  
  #Increment the counter to update filename
  image_counter = image_counter + 1

images_pdf = convert_from_path('data1.PDF', 500)

images_pdf[0]

## should using the image with the jpg format
## if using after converter result, will goes error

# pdf_img = cv2.imread(images_pdf[0])
pdf_img = cv2.imread('page_1.jpg')

imgs_pdf = np.array(images_pdf[0])

# pdf_img = imgs_pdf

display(pdf_img)

"""### Preprocessing first"""

def plot_img(images, titles):
  fig, axs = plt.subplots(nrows = 1, ncols = len(images), figsize = (15, 15))
  for i, p in enumerate(images):
    axs[i].imshow(p, 'gray')
    axs[i].set_title(titles[i])
    #axs[i].axis('off')
  plt.show()

### Input Threshold Preprocess  
img = pdf_img
img = cv2.medianBlur(img, 5)

### Input Threshold Preprocess  
ret, th1 = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)

# Plotting the images
result_img = [img, th1]
titles = ['Original Image', 'Thresh Binary']
plot_img(result_img, titles)

# img_for_gray = img_for_gray

# img_for_gray = cv2.cvtColor(img_for_gray, cv2.COLOR_BGR2RGB)
# grayscale = cv2.cvtColor(img_for_gray, cv2.COLOR_RGB2GRAY)

bounds = reader.readtext(np.array(th1), min_size=0, slope_ths=0.2, 
                         ycenter_ths=0.7, height_ths=0.6, width_ths=0.8,
                         decoder='beamsearch', beamWidth=10)
bounds

# def draw_boxes(image, bounds, color='green', width=2):
#   draw = ImageDraw.Draw(image)
#   for bound in bounds:
#     p0, p1, p2, p3 = bound[0] #every angle of the bounding box
#     draw.line([*p0, *p1, *p2, *p3, *p0], fill=color, width=width)
#   return image

# draw_boxes(images[0], bounds)

bounds[1][1]

# Concate the bounding box into a single text


text=''
for i in range(len(bounds)):
  text = text + bounds[i][1] + '\n'

print(text)

nlp=spacy.load('en_core_web_sm')
### One of NLP lib for english text

doc = nlp(text)

from spacy import displacy
displacy.render(nlp(doc.text), style='ent', jupyter=True)

# telling the diplay to get the entity in the very good way

